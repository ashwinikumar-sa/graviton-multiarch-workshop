---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a Cloud9 environment setup with kubectl, eksctl and an EKS cluster with a managed node group + Mixed arch ASG environment. Please allow ~20min for the EKS cluster to be ready.
Metadata:
  Author:
    Description: Ashwini Kumar <kumruas@amazon.com>
  License:
    Description: 'Copyright 2020 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'

Parameters:
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh/http access and load balancer http
      access
    Type: String
  C9InstanceType:
    Description: Example Cloud9 instance type
    Type: String
    Default: m5.large
    AllowedValues:
      - m5.large
      - t3.large
      - t3.medium
    ConstraintDescription: Must be a valid Cloud9 instance type
  C9KubectlVersion:
    Description: Cloud9 instance kubectl version
    Type: String
    Default: v1.21.2
    ConstraintDescription: Must be a valid kubectl version
  C9KubectlVersionTEST:
    Description: Cloud9 instance kubectl version
    Type: String
    Default: v1.21.2
    ConstraintDescription: Must be a valid kubectl version
  C9EKSctlVersion:
    Description: Cloud9 instance eksctl version
    Type: String
    Default: 0.68.0
    ConstraintDescription: Must be a valid eksctl version
  EKSClusterVersion:
    Description: EKS Cluster Vesion
    Type: String
    Default: 1.21
    ConstraintDescription: Must be a valid eks version
  EKSClusterName:
    Description: EKS Cluster Name
    Type: String
    Default: eksworkshop-eksctl
    ConstraintDescription: Must be a valid eks version
  #Used only by Event Engine, if you are self-deploying the stack leave the default value to NONE
  EETeamRoleArn:
    Description: "ARN of the Team Role"
    Default: NONE
    Type: String
    ConstraintDescription: This is ONLY used for Event Engine, dont change this if you are self-deploying the stack

Conditions: 
  NotEventEngine: !Equals [!Ref EETeamRoleArn, NONE]

Resources:
##################ASG Workshop Resources##################
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
  
  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - vpc

  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc

  publicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-publicSubnet1"
      VpcId: !Ref vpc

  publicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-publicSubnet2"
      VpcId: !Ref vpc

  publicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-publicSubnet3"
      VpcId: !Ref vpc


  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-privateSubnet1"
      VpcId: !Ref vpc


  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-privateSubnet2"
      VpcId: !Ref vpc

  privateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-privateSubnet3"
      VpcId: !Ref vpc

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - vpc
      - attachGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Route Table"
      VpcId: !Ref vpc

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    DependsOn: vpc
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Route Table"

  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet1
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet2
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2

  publicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet3
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet3


  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet1
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet1

  privateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet2
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet2

  privateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet3
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet3


  EIPNATGateway:
    Type: AWS::EC2::EIP
    DependsOn:
      - attachGateway
      - vpc
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - publicSubnet1
    Properties:
      AllocationId: !GetAtt EIPNATGateway.AllocationId
      SubnetId: !Ref publicSubnet1

  publicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - publicRouteTable
      - internetGateway
      - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  privateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivate
      - NATGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref RouteTablePrivate

  autoScalingServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: autoscaling.amazonaws.com
      Description: Default Service-Linked Role enables access to AWS Services and Resources
        used or managed by Auto Scaling

  loadBalancerSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Allow http (80)
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup

  
  instanceSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Allow ssh (22) and http (80)
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
    
  instanceSecurityGroupIngress:
    DependsOn:
    - instanceSecurityGroup
    - loadBalancerSecurityGroup
    Properties:
      FromPort: 80
      GroupId:
        Ref: instanceSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: loadBalancerSecurityGroup
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress

  myALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - loadBalancerSecurityGroup
      - publicSubnet1
      - publicSubnet2
      - publicSubnet3
    Properties:
      Name: !Sub "${AWS::StackName}"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
        - !Ref publicSubnet3

  myTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - vpc
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Sub "${AWS::StackName}"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId: !Ref vpc

  myALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - myALB
      - myTG
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTG
      LoadBalancerArn: !Ref myALB
      Port: 80
      Protocol: HTTP     


  ecrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: myrepo

  instanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-InstanceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - instanceRole
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-InstanceProfile"
      Path: /
      Roles:
        - Ref: instanceRole

  x86LaunchTemplate:
    DependsOn:
      - instanceProfile
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "lt-x86" 
      LaunchTemplateData:
        ImageId: ami-0eb324d928acca58a
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn

        SecurityGroupIds:
          - !Ref instanceSecurityGroup

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}"

  GravitonLaunchTemplate:
    DependsOn:
      - instanceProfile
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "lt-arm64"
      LaunchTemplateData:
        ImageId: ami-04d305fac4c9ef925
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn

        SecurityGroupIds:
          - !Ref instanceSecurityGroup

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}"
                
          ################## CLOUD9 Instance PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Condition: NotEventEngine
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"
  
  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - C9LambdaPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"

################## LAMBDA BOOTSTRAP FUNCTION ################

  C9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
    - C9BootstrapInstanceLambdaFunction
    - C9Instance
    - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      ServiceToken:
        Fn::GetAtt:
        - C9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: C9Instance
      LabIdeInstanceProfileArn: !If [ NotEventEngine, !GetAtt C9InstanceProfile.Arn, !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/TeamRoleInstanceProfile' ]

  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - C9LambdaExecutionRole
        - Arn
      Runtime: python3.6
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          # import loggings
          import json
          import os
          import time
          import traceback
          import cfnresponse

          # logger = logging.getLogger()
          # logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      # Get the InstanceId of the Cloud9 IDE
                      # print(str({'Name': 'tag:aws:cloud9:environment','Values': [event['ResourceProperties']['EnvironmentId']]}))
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:aws:cloud9:environment','Values': [event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))

                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')

                  except Exception as e:
                      # logger.error(e, exc_info=True)
                      responseData = {'Error': traceback.format_exc(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
################## SSM BOOTSRAP HANDLER ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  C9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Content: Yaml
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: C9bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash"
            - date
            - . /home/ec2-user/.bashrc
            - whoami
            - !Sub 'echo "export KUBECTL_VERSION=${C9KubectlVersion}"'
            - sudo -H -u ec2-user aws sts get-caller-identity
            - echo '=== INSTALL kubectl ==='
            - !Sub 'export KUBECTL_VERSION=${C9KubectlVersion}'
            - sudo curl --silent --location -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
            - sudo chmod +x /usr/local/bin/kubectl
            - echo '=== Install JQ and envsubst ==='
            - sudo yum -y install jq gettext
            - echo '=== Update to the latest AWS CLI ==='
            - sudo -H -u ec2-user aws --version
            - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            - unzip awscliv2.zip
            - sudo ./aws/install
            - . /home/ec2-user/.bash_profile
            - sudo -H -u ec2-user aws --version
            - echo '=== setup AWS configs ==='
            - rm -vf /home/ec2-user/.aws/credentials
            - export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)
            - export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
            - echo "export ACCOUNT_ID=${ACCOUNT_ID}" >> /home/ec2-user/.bash_profile
            - echo "export AWS_REGION=${AWS_REGION}" >> /home/ec2-user/.bash_profile
            - sudo -H -u ec2-user aws configure set default.region ${AWS_REGION}
            - sudo -H -u ec2-user aws configure get default.region
            - sudo -H -u ec2-user aws sts get-caller-identity
            - echo '=== Generate SSH key and import to aws ==='
            - sudo -H -u ec2-user ssh-keygen -f /home/ec2-user/.ssh/id_rsa1 -P ''
            - sudo -H -u ec2-user aws ec2 import-key-pair --key-name "eksworkshop" --public-key-material file:///home/ec2-user/.ssh/id_rsa1.pub
            - echo '=== Install EKSCTL ==='
            - !Sub 'export EKSCTL_VERSION=${C9EKSctlVersion}'
            - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            - sudo mv -v /tmp/eksctl /usr/local/bin
            - sudo -H -u ec2-user /usr/local/bin/eksctl version
            - echo '=== Create EKS Cluster ==='
            - !Sub 'sudo -H -u ec2-user /usr/local/bin/eksctl create cluster --version=${EKSClusterVersion} --name=${EKSClusterName} --node-private-networking  --managed --nodes=2 --alb-ingress-access --region=${AWS::Region} --node-labels="lifecycle=OnDemand,intent=control-apps" --asg-access --zones=us-west-2a,us-west-2b,us-west-2c'
            - sudo -H -u ec2-user /usr/local/bin/kubectl get nodes

  C9BootstrapAssociation:
    Type: AWS::SSM::Association
    DependsOn:
    - C9OutputBucket
    Properties:
      Name: !Ref C9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
          - Active

################## INSTANCE #####################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: NotEventEngine
    Properties:
      Path: "/"
      Roles:
      - Ref: C9Role
  C9Instance:
    Description: "-"
    DependsOn: C9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for Examples
      AutomaticStopTimeMinutes: 3600
      InstanceType:
        Ref: C9InstanceType
      Name: 
        Ref: AWS::StackName
      # OwnerArn: !Sub 'arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey'
      OwnerArn: !If [NotEventEngine , !Ref AWS::NoValue , !Sub 'arn:aws:sts::${AWS::AccountId}:assumed-role/TeamRole/MasterKey']
      Tags:
        -
          Key: SSMBootstrap
          Value: Active
        -
          Key: Environment
          Value:
            Ref: AWS::StackName

Outputs:
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/cloud9/ide/"
        - Ref: C9Instance
        - "?region="
        - Ref: AWS::Region

  EKSCluster:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/eks/home"
        - "?region="
        - Ref: AWS::Region
        - "#/clusters/"
        - Ref: EKSClusterName
  
  EKSClusterVersion:
    Value: !Ref EKSClusterVersion
   
  stackName:
    Description: The CFN stack name
    Value: !Ref AWS::StackName
      
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${AWS::StackName}-awsRegionId"

  instanceSecurityGroup:
    Description: Instance security group
    Value: !Ref instanceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-instanceSecurityGroup"

  loadBalancerSecurityGroup:
    Description: Load Balancer security group
    Value: !Ref loadBalancerSecurityGroup

  publicSubnet1:
    Description: Public subnet 1
    Value: !Ref publicSubnet1

  publicSubnet2:
    Description: Public subnet 2
    Value: !Ref publicSubnet2

  publicSubnet3:
    Description: Public subnet 3
    Value: !Ref publicSubnet3

  privateSubnet1:
    Description: Private subnet 1
    Value: !Ref privateSubnet1

  privateSubnet2:
    Description: Private subnet 2
    Value: !Ref privateSubnet2

  privateSubnet3:
    Description: Private subnet 3
    Value: !Ref privateSubnet3

  vpc:
    Description: The VPC
    Value: !Ref vpc
    
  instanceProfile:
    Description: Instance profile ARN
    Value:
      Fn::GetAtt:
      - instanceProfile
      - Arn
  
  instanceSecurityGroup:
    Description: Instance security group
    Value:
      Ref: instanceSecurityGroup

  loadBalancerSecurityGroup:
    Description: Load Balancer security group
    Value:
      Ref: loadBalancerSecurityGroup

  x86LaunchTemplateId:
    Description: The Launch Template
    Value: !Ref x86LaunchTemplate
    
  GravitonLaunchTemplateId:
    Description: The Launch Template
    Value: !Ref GravitonLaunchTemplate

  VPCPublicSubnets:
    Description:  The list of public subnets in the VPC
    Value: !Join [",", [!Ref publicSubnet1, !Ref publicSubnet2, !Ref publicSubnet3]]

  VPCPrivateSubnets:
    Description:  The list of private subnets in the VPC
    Value: !Join [",", [!Ref privateSubnet1, !Ref privateSubnet2, !Ref privateSubnet3]]

  ecrRepository:
    Description: The ecrRepository
    Value: !Ref ecrRepository
      
  autoScalingServiceLinkedRole:
    Description: The AWS Region ID your template was launched in
    Value: !Ref autoScalingServiceLinkedRole

  C9Instance:
    Description: Cloud9 environment
    Value:
      Fn::GetAtt:
        - C9Instance
        - Name
...